#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *next;

    // Constructor for Node
    Node(int data1, Node *next1=nullptr){
        data = data1;
        next = next1;
    }
};

Node *removeHead(Node *head)
{
    if (head == nullptr) return nullptr; // Handle empty list
    Node *temp = head;
    head = head->next;
    delete temp;
    return head;
}

Node *removeTail(Node *head)
{
    if (head == nullptr) {
        return nullptr;
    }
    if (head->next == nullptr) {
        delete head;
        return nullptr;
    }
    Node *temp = head;
    while (temp->next->next != nullptr) { // Corrected condition
        temp = temp->next;
    }
    delete temp->next;
    temp->next = nullptr;
    return head;
}

Node* convert(vector<int> &arr) {
    if (arr.empty()) return nullptr; // Handle empty vector case

    Node *head = new Node(arr[0]);
    Node *mover = head;

    for (int i = 1; i < arr.size(); i++) {
        Node *temp = new Node(arr[i]);
        mover->next = temp;
        mover = temp;
    }

    return head;
}

Node *deleteNode(Node *head, int k) {
    if (head == nullptr) return head; // Handle empty list

    if (k == 1) {
        Node *temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    Node *temp = head;
    Node *prev = nullptr;
    int c = 1;
    
    while (temp != nullptr && c < k) {
        prev = temp;
        temp = temp->next;
        c++;
    }
    
    if (temp != nullptr) {
        prev->next = temp->next;
        delete temp;
    }
  int main() {
    vector<int> arr = {2, 5, 7, 8};
    Node* head = convert(arr); // Use a pointer for head

    cout << "Original List: ";
    printList(head); // Print the linked list

    head = removeHead(head);
    cout << "After removing head: ";
    printList(head);

    head = removeTail(head);
    cout << "After removing tail: ";
    printList(head);

    head = deleteNode(head, 2); // Deleting the second element in the list
    cout << "After deleting the second element: ";
    printList(head);

    // Clean up remaining list
    while (head != nullptr) {
        head = removeHead(head);
    }

    return 0;
}
