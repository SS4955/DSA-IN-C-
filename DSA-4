#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *next;

    // Constructor for Node
    Node(int data1, Node *next1 = nullptr) {
        data = data1;
        next = next1;
    }
};

int helper(Node *temp) {
    if (temp == nullptr) {
        return 1;
    }
    int carry = helper(temp->next);
    temp->data += carry;
    if (temp->data < 10) {
        return 0;
    }
    temp->data = 0;
    return 1;
}

Node *add(Node *head) {
    int carry = helper(head);
    if (carry == 1) {
        Node *newnode = new Node(1);
        newnode->next = head;
        return newnode;
    }
    return head;
}

Node* convert(const vector<int> &arr) {
    if (arr.empty()) return nullptr; // Handle empty vector case

    Node *head = new Node(arr[0]);
    Node *mover = head;

    for (int i = 1; i < arr.size(); i++) {
        Node *temp = new Node(arr[i]);
        mover->next = temp;
        mover = temp;
    }

    return head;
}

// Function to print linked list for testing
void printList(Node *head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    vector<int> arr = {9, 9, 9}; // Example input
    Node *head = convert(arr);

    head = add(head);

    printList(head); // Expected output: 1 0 0 0

    return 0;
}
